{"data":{"site":{"siteMetadata":{"title":"Dulldave","author":"David Dyke"}},"markdownRemark":{"id":"f39e040a-e2af-5285-819e-f7a2fd0a1b36","excerpt":"I came across an incident recently where data was going to a service via SQS, upon hitting that service it would then talk to a bunch of other services to…","html":"<p>I came across an incident recently where data was going to a service via SQS, upon hitting that service it would then talk to a bunch of other services to gather more data for the request. At the same time an attack had taking down the connection to those other services which was causing our requests to fail and build up on a dead letter queue. Now these requests weren’t broken per se, they were just victim to a one off transient error. The data within the request was perfectly valid. Prior to this the dead letter queue was used more for logging the very occasional permanent error that had occured and was used as a way to debug.</p>\n<p>Because of that event I wanted to build something that could be turned on at a moments notice and be used to replay items in the dead letter queue, albeit temporarily.</p>\n<p>Lambda seemed to be a good fit for this. We could specify a queue to trigger the Lambda against and a queue to replay those items to. Which would mean if we got notified via our Cloudwatch alarms that the DLQ was filling up we could diagnose the issue and at the right time consume those items in the DLQ.</p>\n<p>The other benefit with using a Lambda is that we can have all of the code sitting, with the triggers disabled, and only when we need to enable them to start the process.</p>\n<p>The code itself if very simple. We start with actually initialising the Lambda and making sure the function signature accepts <code class=\"language-text\">events.SQSEvent</code>, after all we’re triggering this against messages on an SQS queue.</p>\n<p>When the Lambda is triggered, it loops over the records that come in and essentially forwards that message onto the output queue.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\n\t<span class=\"token string\">\"github.com/aws/aws-lambda-go/events\"</span>\n\t<span class=\"token string\">\"github.com/aws/aws-lambda-go/lambda\"</span>\n\t<span class=\"token string\">\"github.com/aws/aws-sdk-go/aws\"</span>\n\t<span class=\"token string\">\"github.com/aws/aws-sdk-go/aws/session\"</span>\n\t<span class=\"token string\">\"github.com/aws/aws-sdk-go/service/sqs\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlambda<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// queueMap is essentially the Dead Letter Queue ARN -> Destination Queue URL</span>\n<span class=\"token comment\">// It means you can have multiple dead letter queue triggers setup</span>\n<span class=\"token keyword\">var</span> queueMap <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"arn:aws:sqs:eu-west-1:262141466354:test-dead-letter\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://sqs.eu-west-1.amazonaws.com/262141466354/test\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> events events<span class=\"token punctuation\">.</span>SQSEvent<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\n\tsess <span class=\"token operator\">:=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">NewSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tsvc <span class=\"token operator\">:=</span> sqs<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>sess<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> events<span class=\"token punctuation\">.</span>Records <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> svc<span class=\"token punctuation\">.</span><span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sqs<span class=\"token punctuation\">.</span>SendMessageInput<span class=\"token punctuation\">{</span>\n\t\t\tMessageBody<span class=\"token punctuation\">:</span>       aws<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tQueueUrl<span class=\"token punctuation\">:</span>          aws<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>queueMap<span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">.</span>EventSourceARN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tMessageAttributes<span class=\"token punctuation\">:</span> <span class=\"token function\">eventAttributeToSQSAttribute</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>MessageAttributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">eventAttributeToSQSAttribute</span><span class=\"token punctuation\">(</span>eventAttrs <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>events<span class=\"token punctuation\">.</span>SQSMessageAttribute<span class=\"token punctuation\">)</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>sqs<span class=\"token punctuation\">.</span>MessageAttributeValue <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>eventAttrs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tm <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>sqs<span class=\"token punctuation\">.</span>MessageAttributeValue<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> eventAttrs <span class=\"token punctuation\">{</span>\n\t\tm<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>sqs<span class=\"token punctuation\">.</span>MessageAttributeValue<span class=\"token punctuation\">{</span>\n\t\t\tDataType<span class=\"token punctuation\">:</span>    aws<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>DataType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tBinaryValue<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>BinaryValue<span class=\"token punctuation\">,</span>\n\t\t\tStringValue<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>StringValue<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> m\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s start with a simple make file, we can use this to build and deploy our Lambda:</p>\n<div class=\"gatsby-highlight\" data-language=\"make\"><pre class=\"language-make\"><code class=\"language-make\">buildAndZip:\n\tGOOS=linux go build handler.go\n\tzip handler.zip ./handler\n\nclean:\n\trm handler.zip handler\n\ncreate:\n\tmake buildAndZip\n\n\taws lambda create-function \\\n\t\t--region eu-west-1 \\\n\t\t--function-name sqs-dead-letter-replay \\\n\t\t--memory 128 \\\n\t\t--role arn:aws:iam::&lt;ACCOUNT-ID&gt;:role/&lt;ROLE-NAME&gt; \\\n\t\t--runtime go1.x \\\n\t\t--zip-file fileb://handler.zip \\\n\t\t--handler handler\n\n\tmake clean\n\nupdate:\n\tmake buildAndZip\n\n\taws lambda update-function-code \\\n\t\t--function-name sqs-dead-letter-replay \\\n\t\t--zip-file fileb://handler.zip\n\n\tmake clean</code></pre></div>\n<ul>\n<li><code class=\"language-text\">buildAndZip</code> simply builds a Go binary for the targetted OS, in this case “linux” and then zips the outputted binary.</li>\n<li><code class=\"language-text\">clean</code> is just removes any created binary’s or zip files.</li>\n<li><code class=\"language-text\">create</code> is the command that you run to create the initial Lambda.</li>\n<li><code class=\"language-text\">update</code> is the command you run when you want to update the Lambda code.</li>\n</ul>\n<p><a href=\"https://github.com/aws/aws-lambda-go/blob/master/events/README_SQS.md\">https://github.com/aws/aws-lambda-go/blob/master/events/README_SQS.md</a></p>","frontmatter":{"title":"AWS SQS Dead Letter Replay Lambda","date":"March 17, 2019","description":"Ever needed to replay items in your dead letter queue?"}}},"pageContext":{"slug":"/aws-sqs-dead-letter-replay-lambda/","previous":{"fields":{"slug":"/how-i-like-to-structure-and-build-go-services/"},"frontmatter":{"title":"How I like to Structure and Build Go Services"}},"next":null}}